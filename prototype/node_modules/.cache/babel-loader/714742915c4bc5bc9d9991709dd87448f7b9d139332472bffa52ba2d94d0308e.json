{"ast":null,"code":"// Authentication service for user management\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile, sendEmailVerification, sendPasswordResetEmail } from 'firebase/auth';\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, db, isFirebaseReady } from '../firebase';\nclass AuthService {\n  constructor() {\n    this.user = null;\n    this.loading = true;\n  }\n\n  // Initialize auth listener\n  initialize(callback) {\n    if (!isFirebaseReady()) {\n      console.log('Auth service running in offline mode');\n      this.loading = false;\n      if (callback) callback(null);\n      return;\n    }\n    return onAuthStateChanged(auth, async user => {\n      this.user = user;\n      this.loading = false;\n      if (user) {\n        // Update user's last login\n        await this.updateUserData({\n          lastLogin: serverTimestamp()\n        });\n      }\n      if (callback) callback(user);\n    });\n  }\n\n  // Sign up with email and password\n  async signUp(email, password, displayName) {\n    if (!isFirebaseReady()) {\n      throw new Error('Firebase not configured. Running in offline mode.');\n    }\n    try {\n      const {\n        user\n      } = await createUserWithEmailAndPassword(auth, email, password);\n\n      // Update display name\n      if (displayName) {\n        await updateProfile(user, {\n          displayName\n        });\n      }\n\n      // Create user document in Firestore\n      await this.createUserProfile(user, {\n        displayName\n      });\n\n      // Send email verification\n      await sendEmailVerification(user);\n      return user;\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw this.handleAuthError(error);\n    }\n  }\n\n  // Sign in with email and password\n  async signIn(email, password) {\n    if (!isFirebaseReady()) {\n      throw new Error('Firebase not configured. Running in offline mode.');\n    }\n    try {\n      const {\n        user\n      } = await signInWithEmailAndPassword(auth, email, password);\n      return user;\n    } catch (error) {\n      console.error('Sign in error:', error);\n      throw this.handleAuthError(error);\n    }\n  }\n\n  // Sign out\n  async signOut() {\n    if (!isFirebaseReady()) {\n      this.user = null;\n      return;\n    }\n    try {\n      await signOut(auth);\n      this.user = null;\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    }\n  }\n\n  // Reset password\n  async resetPassword(email) {\n    if (!isFirebaseReady()) {\n      throw new Error('Firebase not configured. Running in offline mode.');\n    }\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw this.handleAuthError(error);\n    }\n  }\n\n  // Create user profile in Firestore\n  async createUserProfile(user, additionalData = {}) {\n    if (!isFirebaseReady() || !user) return;\n    try {\n      const userRef = doc(db, 'users', user.uid);\n      const userDoc = await getDoc(userRef);\n      if (!userDoc.exists()) {\n        const userData = {\n          uid: user.uid,\n          email: user.email,\n          displayName: user.displayName || additionalData.displayName || '',\n          createdAt: serverTimestamp(),\n          emailVerified: user.emailVerified,\n          // Mental health app specific fields\n          preferences: {\n            notifications: true,\n            darkMode: false,\n            reminderTime: '09:00'\n          },\n          privacy: {\n            analyticsOptIn: true,\n            shareProgress: false\n          },\n          ...additionalData\n        };\n        await setDoc(userRef, userData);\n        console.log('User profile created successfully');\n      }\n    } catch (error) {\n      console.error('Error creating user profile:', error);\n    }\n  }\n\n  // Update user data\n  async updateUserData(data) {\n    if (!isFirebaseReady() || !this.user) return;\n    try {\n      const userRef = doc(db, 'users', this.user.uid);\n      await setDoc(userRef, data, {\n        merge: true\n      });\n    } catch (error) {\n      console.error('Error updating user data:', error);\n    }\n  }\n\n  // Get user profile data\n  async getUserProfile() {\n    if (!isFirebaseReady() || !this.user) return null;\n    try {\n      const userRef = doc(db, 'users', this.user.uid);\n      const userDoc = await getDoc(userRef);\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n  }\n\n  // Handle authentication errors\n  handleAuthError(error) {\n    const errorMessages = {\n      'auth/user-not-found': 'No existe una cuenta con este email.',\n      'auth/wrong-password': 'Contraseña incorrecta.',\n      'auth/email-already-in-use': 'Ya existe una cuenta con este email.',\n      'auth/weak-password': 'La contraseña debe tener al menos 6 caracteres.',\n      'auth/invalid-email': 'Email inválido.',\n      'auth/too-many-requests': 'Demasiados intentos fallidos. Intenta más tarde.',\n      'auth/network-request-failed': 'Error de conexión. Verifica tu internet.'\n    };\n    const message = errorMessages[error.code] || error.message;\n    return new Error(message);\n  }\n\n  // Get current user\n  getCurrentUser() {\n    return this.user;\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.user;\n  }\n\n  // Check if loading\n  isLoading() {\n    return this.loading;\n  }\n}\n\n// Create singleton instance\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","sendEmailVerification","sendPasswordResetEmail","doc","setDoc","getDoc","serverTimestamp","auth","db","isFirebaseReady","AuthService","constructor","user","loading","initialize","callback","console","log","updateUserData","lastLogin","signUp","email","password","displayName","Error","createUserProfile","error","handleAuthError","signIn","resetPassword","additionalData","userRef","uid","userDoc","exists","userData","createdAt","emailVerified","preferences","notifications","darkMode","reminderTime","privacy","analyticsOptIn","shareProgress","data","merge","getUserProfile","errorMessages","message","code","getCurrentUser","isAuthenticated","isLoading","authService"],"sources":["/Users/uri/Documents/GitHub/echo/prototype/src/services/AuthService.js"],"sourcesContent":["// Authentication service for user management\nimport { \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  updateProfile,\n  sendEmailVerification,\n  sendPasswordResetEmail\n} from 'firebase/auth';\nimport { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, db, isFirebaseReady } from '../firebase';\n\nclass AuthService {\n  constructor() {\n    this.user = null;\n    this.loading = true;\n  }\n\n  // Initialize auth listener\n  initialize(callback) {\n    if (!isFirebaseReady()) {\n      console.log('Auth service running in offline mode');\n      this.loading = false;\n      if (callback) callback(null);\n      return;\n    }\n\n    return onAuthStateChanged(auth, async (user) => {\n      this.user = user;\n      this.loading = false;\n      \n      if (user) {\n        // Update user's last login\n        await this.updateUserData({\n          lastLogin: serverTimestamp()\n        });\n      }\n      \n      if (callback) callback(user);\n    });\n  }\n\n  // Sign up with email and password\n  async signUp(email, password, displayName) {\n    if (!isFirebaseReady()) {\n      throw new Error('Firebase not configured. Running in offline mode.');\n    }\n\n    try {\n      const { user } = await createUserWithEmailAndPassword(auth, email, password);\n      \n      // Update display name\n      if (displayName) {\n        await updateProfile(user, { displayName });\n      }\n      \n      // Create user document in Firestore\n      await this.createUserProfile(user, { displayName });\n      \n      // Send email verification\n      await sendEmailVerification(user);\n      \n      return user;\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw this.handleAuthError(error);\n    }\n  }\n\n  // Sign in with email and password\n  async signIn(email, password) {\n    if (!isFirebaseReady()) {\n      throw new Error('Firebase not configured. Running in offline mode.');\n    }\n\n    try {\n      const { user } = await signInWithEmailAndPassword(auth, email, password);\n      return user;\n    } catch (error) {\n      console.error('Sign in error:', error);\n      throw this.handleAuthError(error);\n    }\n  }\n\n  // Sign out\n  async signOut() {\n    if (!isFirebaseReady()) {\n      this.user = null;\n      return;\n    }\n\n    try {\n      await signOut(auth);\n      this.user = null;\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    }\n  }\n\n  // Reset password\n  async resetPassword(email) {\n    if (!isFirebaseReady()) {\n      throw new Error('Firebase not configured. Running in offline mode.');\n    }\n\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw this.handleAuthError(error);\n    }\n  }\n\n  // Create user profile in Firestore\n  async createUserProfile(user, additionalData = {}) {\n    if (!isFirebaseReady() || !user) return;\n\n    try {\n      const userRef = doc(db, 'users', user.uid);\n      const userDoc = await getDoc(userRef);\n\n      if (!userDoc.exists()) {\n        const userData = {\n          uid: user.uid,\n          email: user.email,\n          displayName: user.displayName || additionalData.displayName || '',\n          createdAt: serverTimestamp(),\n          emailVerified: user.emailVerified,\n          // Mental health app specific fields\n          preferences: {\n            notifications: true,\n            darkMode: false,\n            reminderTime: '09:00'\n          },\n          privacy: {\n            analyticsOptIn: true,\n            shareProgress: false\n          },\n          ...additionalData\n        };\n\n        await setDoc(userRef, userData);\n        console.log('User profile created successfully');\n      }\n    } catch (error) {\n      console.error('Error creating user profile:', error);\n    }\n  }\n\n  // Update user data\n  async updateUserData(data) {\n    if (!isFirebaseReady() || !this.user) return;\n\n    try {\n      const userRef = doc(db, 'users', this.user.uid);\n      await setDoc(userRef, data, { merge: true });\n    } catch (error) {\n      console.error('Error updating user data:', error);\n    }\n  }\n\n  // Get user profile data\n  async getUserProfile() {\n    if (!isFirebaseReady() || !this.user) return null;\n\n    try {\n      const userRef = doc(db, 'users', this.user.uid);\n      const userDoc = await getDoc(userRef);\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n  }\n\n  // Handle authentication errors\n  handleAuthError(error) {\n    const errorMessages = {\n      'auth/user-not-found': 'No existe una cuenta con este email.',\n      'auth/wrong-password': 'Contraseña incorrecta.',\n      'auth/email-already-in-use': 'Ya existe una cuenta con este email.',\n      'auth/weak-password': 'La contraseña debe tener al menos 6 caracteres.',\n      'auth/invalid-email': 'Email inválido.',\n      'auth/too-many-requests': 'Demasiados intentos fallidos. Intenta más tarde.',\n      'auth/network-request-failed': 'Error de conexión. Verifica tu internet.'\n    };\n\n    const message = errorMessages[error.code] || error.message;\n    return new Error(message);\n  }\n\n  // Get current user\n  getCurrentUser() {\n    return this.user;\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.user;\n  }\n\n  // Check if loading\n  isLoading() {\n    return this.loading;\n  }\n}\n\n// Create singleton instance\nconst authService = new AuthService();\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}