{"ast":null,"code":"// Firestore helpers for mental health app data\nimport { collection, doc, addDoc, setDoc, getDoc, getDocs, query, where, orderBy, limit, serverTimestamp } from 'firebase/firestore';\nimport { db, isFirebaseReady } from '../firebase';\nimport authService from '../services/AuthService';\n\n// Assessment Results\nexport async function saveAssessmentResult(assessmentData) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    const stored = JSON.parse(localStorage.getItem('assessments') || '[]');\n    stored.push({\n      ...assessmentData,\n      id: Date.now(),\n      timestamp: new Date().toISOString()\n    });\n    localStorage.setItem('assessments', JSON.stringify(stored));\n    return 'offline-' + Date.now();\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n    const docRef = await addDoc(collection(db, 'assessments'), {\n      userId: user.uid,\n      ...assessmentData,\n      createdAt: serverTimestamp()\n    });\n    console.log('Assessment saved:', docRef.id);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error saving assessment:', error);\n    throw error;\n  }\n}\n\n// Intervention Usage (calming tools usage)\nexport async function saveInterventionUsage(interventionData) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    const stored = JSON.parse(localStorage.getItem('interventions') || '[]');\n    stored.push({\n      ...interventionData,\n      id: Date.now(),\n      timestamp: new Date().toISOString()\n    });\n    localStorage.setItem('interventions', JSON.stringify(stored));\n    return 'offline-' + Date.now();\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n    const docRef = await addDoc(collection(db, 'interventions'), {\n      userId: user.uid,\n      ...interventionData,\n      createdAt: serverTimestamp()\n    });\n    console.log('Intervention usage saved:', docRef.id);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error saving intervention usage:', error);\n    throw error;\n  }\n}\n\n// User Progress Data\nexport async function saveProgressEntry(progressData) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    const stored = JSON.parse(localStorage.getItem('progress') || '[]');\n    stored.push({\n      ...progressData,\n      id: Date.now(),\n      timestamp: new Date().toISOString()\n    });\n    localStorage.setItem('progress', JSON.stringify(stored));\n    return 'offline-' + Date.now();\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n    const docRef = await addDoc(collection(db, 'progress'), {\n      userId: user.uid,\n      ...progressData,\n      createdAt: serverTimestamp()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Error saving progress:', error);\n    throw error;\n  }\n}\n\n// Get user's assessment history\nexport async function getUserAssessments(limitCount = 10) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, reading from localStorage');\n    return JSON.parse(localStorage.getItem('assessments') || '[]').slice(-limitCount);\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return [];\n    const q = query(collection(db, 'assessments'), where('userId', '==', user.uid), orderBy('createdAt', 'desc'), limit(limitCount));\n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Error getting assessments:', error);\n    return [];\n  }\n}\n\n// Get user's intervention usage stats\nexport async function getUserInterventionStats() {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, reading from localStorage');\n    const interventions = JSON.parse(localStorage.getItem('interventions') || '[]');\n    // Basic stats from localStorage\n    return {\n      totalSessions: interventions.length,\n      favoriteTools: {},\n      weeklyUsage: []\n    };\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return null;\n\n    // Simple query without orderBy to avoid index requirement\n    const q = query(collection(db, 'interventions'), where('userId', '==', user.uid));\n    const snapshot = await getDocs(q);\n    const interventions = snapshot.docs.map(doc => doc.data());\n\n    // Process stats\n    const stats = {\n      totalSessions: interventions.length,\n      favoriteTools: {},\n      totalMinutes: 0\n    };\n    interventions.forEach(intervention => {\n      // Count tool usage\n      if (stats.favoriteTools[intervention.tool]) {\n        stats.favoriteTools[intervention.tool]++;\n      } else {\n        stats.favoriteTools[intervention.tool] = 1;\n      }\n\n      // Sum duration\n      if (intervention.duration) {\n        stats.totalMinutes += intervention.duration;\n      }\n    });\n    return stats;\n  } catch (error) {\n    console.error('Error getting intervention stats:', error);\n    // Return default stats instead of null to prevent UI issues\n    return {\n      totalSessions: 0,\n      favoriteTools: {},\n      totalMinutes: 0\n    };\n  }\n}\n\n// Save user preferences\nexport async function saveUserPreferences(preferences) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    localStorage.setItem('userPreferences', JSON.stringify(preferences));\n    return;\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n    const userRef = doc(db, 'users', user.uid);\n    await setDoc(userRef, {\n      preferences\n    }, {\n      merge: true\n    });\n  } catch (error) {\n    console.error('Error saving preferences:', error);\n    throw error;\n  }\n}\n\n// Get user preferences\nexport async function getUserPreferences() {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, reading from localStorage');\n    return JSON.parse(localStorage.getItem('userPreferences') || '{}');\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return {};\n    const userRef = doc(db, 'users', user.uid);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data().preferences || {};\n    }\n    return {};\n  } catch (error) {\n    console.error('Error getting preferences:', error);\n    return {};\n  }\n}\n\n// Get recent interventions for activity feed\nexport async function getRecentInterventions(limit = 5) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available');\n    return [];\n  }\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return [];\n    const q = query(collection(db, 'interventions'), where('userId', '==', user.uid), limit(limit));\n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Error getting recent interventions:', error);\n    return [];\n  }\n}","map":{"version":3,"names":["collection","doc","addDoc","setDoc","getDoc","getDocs","query","where","orderBy","limit","serverTimestamp","db","isFirebaseReady","authService","saveAssessmentResult","assessmentData","console","warn","stored","JSON","parse","localStorage","getItem","push","id","Date","now","timestamp","toISOString","setItem","stringify","user","getCurrentUser","Error","docRef","userId","uid","createdAt","log","error","saveInterventionUsage","interventionData","saveProgressEntry","progressData","getUserAssessments","limitCount","slice","q","snapshot","docs","map","data","getUserInterventionStats","interventions","totalSessions","length","favoriteTools","weeklyUsage","stats","totalMinutes","forEach","intervention","tool","duration","saveUserPreferences","preferences","userRef","merge","getUserPreferences","userDoc","exists","getRecentInterventions"],"sources":["/Users/uri/Documents/GitHub/echo/prototype/src/components/firestoreHelpers.js"],"sourcesContent":["// Firestore helpers for mental health app data\nimport { \n  collection, \n  doc, \n  addDoc, \n  setDoc, \n  getDoc, \n  getDocs, \n  query, \n  where, \n  orderBy, \n  limit,\n  serverTimestamp \n} from 'firebase/firestore';\nimport { db, isFirebaseReady } from '../firebase';\nimport authService from '../services/AuthService';\n\n// Assessment Results\nexport async function saveAssessmentResult(assessmentData) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    const stored = JSON.parse(localStorage.getItem('assessments') || '[]');\n    stored.push({ ...assessmentData, id: Date.now(), timestamp: new Date().toISOString() });\n    localStorage.setItem('assessments', JSON.stringify(stored));\n    return 'offline-' + Date.now();\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const docRef = await addDoc(collection(db, 'assessments'), {\n      userId: user.uid,\n      ...assessmentData,\n      createdAt: serverTimestamp(),\n    });\n    \n    console.log('Assessment saved:', docRef.id);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error saving assessment:', error);\n    throw error;\n  }\n}\n\n// Intervention Usage (calming tools usage)\nexport async function saveInterventionUsage(interventionData) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    const stored = JSON.parse(localStorage.getItem('interventions') || '[]');\n    stored.push({ ...interventionData, id: Date.now(), timestamp: new Date().toISOString() });\n    localStorage.setItem('interventions', JSON.stringify(stored));\n    return 'offline-' + Date.now();\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const docRef = await addDoc(collection(db, 'interventions'), {\n      userId: user.uid,\n      ...interventionData,\n      createdAt: serverTimestamp(),\n    });\n    \n    console.log('Intervention usage saved:', docRef.id);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error saving intervention usage:', error);\n    throw error;\n  }\n}\n\n// User Progress Data\nexport async function saveProgressEntry(progressData) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    const stored = JSON.parse(localStorage.getItem('progress') || '[]');\n    stored.push({ ...progressData, id: Date.now(), timestamp: new Date().toISOString() });\n    localStorage.setItem('progress', JSON.stringify(stored));\n    return 'offline-' + Date.now();\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const docRef = await addDoc(collection(db, 'progress'), {\n      userId: user.uid,\n      ...progressData,\n      createdAt: serverTimestamp(),\n    });\n    \n    return docRef.id;\n  } catch (error) {\n    console.error('Error saving progress:', error);\n    throw error;\n  }\n}\n\n// Get user's assessment history\nexport async function getUserAssessments(limitCount = 10) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, reading from localStorage');\n    return JSON.parse(localStorage.getItem('assessments') || '[]').slice(-limitCount);\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return [];\n\n    const q = query(\n      collection(db, 'assessments'),\n      where('userId', '==', user.uid),\n      orderBy('createdAt', 'desc'),\n      limit(limitCount)\n    );\n    \n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n  } catch (error) {\n    console.error('Error getting assessments:', error);\n    return [];\n  }\n}\n\n// Get user's intervention usage stats\nexport async function getUserInterventionStats() {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, reading from localStorage');\n    const interventions = JSON.parse(localStorage.getItem('interventions') || '[]');\n    // Basic stats from localStorage\n    return {\n      totalSessions: interventions.length,\n      favoriteTools: {},\n      weeklyUsage: []\n    };\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return null;\n\n    // Simple query without orderBy to avoid index requirement\n    const q = query(\n      collection(db, 'interventions'),\n      where('userId', '==', user.uid)\n    );\n    \n    const snapshot = await getDocs(q);\n    const interventions = snapshot.docs.map(doc => doc.data());\n    \n    // Process stats\n    const stats = {\n      totalSessions: interventions.length,\n      favoriteTools: {},\n      totalMinutes: 0\n    };\n    \n    interventions.forEach(intervention => {\n      // Count tool usage\n      if (stats.favoriteTools[intervention.tool]) {\n        stats.favoriteTools[intervention.tool]++;\n      } else {\n        stats.favoriteTools[intervention.tool] = 1;\n      }\n      \n      // Sum duration\n      if (intervention.duration) {\n        stats.totalMinutes += intervention.duration;\n      }\n    });\n    \n    return stats;\n  } catch (error) {\n    console.error('Error getting intervention stats:', error);\n    // Return default stats instead of null to prevent UI issues\n    return {\n      totalSessions: 0,\n      favoriteTools: {},\n      totalMinutes: 0\n    };\n  }\n}\n\n// Save user preferences\nexport async function saveUserPreferences(preferences) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, saving to localStorage');\n    localStorage.setItem('userPreferences', JSON.stringify(preferences));\n    return;\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const userRef = doc(db, 'users', user.uid);\n    await setDoc(userRef, { preferences }, { merge: true });\n  } catch (error) {\n    console.error('Error saving preferences:', error);\n    throw error;\n  }\n}\n\n// Get user preferences\nexport async function getUserPreferences() {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available, reading from localStorage');\n    return JSON.parse(localStorage.getItem('userPreferences') || '{}');\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return {};\n\n    const userRef = doc(db, 'users', user.uid);\n    const userDoc = await getDoc(userRef);\n    \n    if (userDoc.exists()) {\n      return userDoc.data().preferences || {};\n    }\n    return {};\n  } catch (error) {\n    console.error('Error getting preferences:', error);\n    return {};\n  }\n}\n\n// Get recent interventions for activity feed\nexport async function getRecentInterventions(limit = 5) {\n  if (!isFirebaseReady()) {\n    console.warn('Firebase not available');\n    return [];\n  }\n\n  try {\n    const user = authService.getCurrentUser();\n    if (!user) return [];\n\n    const q = query(\n      collection(db, 'interventions'),\n      where('userId', '==', user.uid),\n      limit(limit)\n    );\n    \n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Error getting recent interventions:', error);\n    return [];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}