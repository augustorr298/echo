{"ast":null,"code":"import _objectSpread from\"/Users/uri/Documents/GitHub/echo/prototype/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Data Collection and Integration Service\nclass DataCollectionService{constructor(){this.dataStore={assessments:[],biometrics:[],interventions:[],userProfile:{},preferences:{}};this.initialized=false;}// Initialize the service\nasync initialize(){try{// Load existing data from localStorage\nconst storedData=localStorage.getItem('echoMentalHealthData');if(storedData){this.dataStore=_objectSpread(_objectSpread({},this.dataStore),JSON.parse(storedData));}// Initialize wearable connections\nawait this.initializeWearableConnections();this.initialized=true;console.log('Data Collection Service initialized');}catch(error){console.error('Failed to initialize Data Collection Service:',error);}}// Save assessment data\nsaveAssessment(assessmentData){const assessment={id:Date.now().toString(),timestamp:new Date().toISOString(),type:'mental_health_assessment',data:assessmentData,source:'app_questionnaire'};this.dataStore.assessments.push(assessment);this.persistData();// Trigger analytics update\nthis.analyzePatterns();return assessment.id;}// Save biometric data\nsaveBiometricData(data){let source=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'manual';const biometricEntry={id:Date.now().toString(),timestamp:new Date().toISOString(),data:data,source:source// 'camera', 'wearable', 'manual', etc.\n};this.dataStore.biometrics.push(biometricEntry);this.persistData();return biometricEntry.id;}// Save intervention usage\nsaveInterventionUsage(interventionType,duration,effectiveness){const intervention={id:Date.now().toString(),timestamp:new Date().toISOString(),type:interventionType,duration:duration,effectiveness:effectiveness,// 1-5 scale\ncontext:this.getCurrentContext()};this.dataStore.interventions.push(intervention);this.persistData();return intervention.id;}// Camera-based emotion detection\nasync analyzeFacialExpressions(videoElement){try{// This would integrate with TensorFlow.js or similar\n// For now, returning mock data\nconst mockEmotionData={emotions:{happiness:Math.random()*0.4,sadness:Math.random()*0.3,anxiety:Math.random()*0.4,stress:Math.random()*0.3,neutral:Math.random()*0.5,anger:Math.random()*0.2,fear:Math.random()*0.2},microExpressions:{eyeMovement:Math.random()*100,blinkRate:Math.random()*20+15,facialTension:Math.random()*100,jawTension:Math.random()*100},faceMetrics:{symmetry:Math.random()*100,skinTone:Math.random()*100,eyeBags:Math.random()*100},confidence:0.75+Math.random()*0.2,processingTime:Math.random()*500+200};this.saveBiometricData(mockEmotionData,'camera');return mockEmotionData;}catch(error){console.error('Facial expression analysis failed:',error);return null;}}// Heart rate detection through camera\nasync detectHeartRateFromCamera(videoElement){try{// This would use photoplethysmography (PPG) through camera\n// Analyzing color changes in face/fingertip\nconst mockHeartRateData={heartRate:Math.floor(Math.random()*40)+60,// 60-100 bpm\nheartRateVariability:Math.random()*50+25,confidence:0.7+Math.random()*0.25,signalQuality:Math.random()*100,timestamp:new Date().toISOString()};this.saveBiometricData(mockHeartRateData,'camera_ppg');return mockHeartRateData;}catch(error){console.error('Heart rate detection failed:',error);return null;}}// Initialize wearable device connections\nasync initializeWearableConnections(){try{// Check for Web Bluetooth support\nif('bluetooth'in navigator){console.log('Bluetooth API available');// Future implementation for fitness trackers, smartwatches\n}// Check for Web USB support\nif('usb'in navigator){console.log('USB API available');// Future implementation for USB-connected devices\n}// Initialize mock wearable data\nthis.startMockWearableDataCollection();}catch(error){console.error('Wearable initialization error:',error);}}// Mock wearable data collection (for demonstration)\nstartMockWearableDataCollection(){// Simulate periodic data from a fitness tracker\nsetInterval(()=>{if(Math.random()>0.8){// 20% chance every interval\nconst wearableData={heartRate:Math.floor(Math.random()*40)+60,steps:Math.floor(Math.random()*1000),sleepQuality:Math.random()*100,stressLevel:Math.random()*100,skinTemperature:36+Math.random()*2,oxygenSaturation:95+Math.random()*5};this.saveBiometricData(wearableData,'wearable_mock');}},30000);// Every 30 seconds\n}// Analyze patterns in collected data\nanalyzePatterns(){try{const recentData=this.getRecentData(7);// Last 7 days\nconst patterns={moodTrends:this.analyzeMoodTrends(recentData.assessments),biometricPatterns:this.analyzeBiometricPatterns(recentData.biometrics),interventionEffectiveness:this.analyzeInterventionEffectiveness(recentData.interventions),riskFactors:this.identifyRiskFactors(recentData),recommendations:this.generateRecommendations(recentData)};// Store analysis results\nthis.dataStore.latestAnalysis={timestamp:new Date().toISOString(),patterns:patterns};this.persistData();return patterns;}catch(error){console.error('Pattern analysis failed:',error);return null;}}// Get recent data within specified days\ngetRecentData(days){const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-days);return{assessments:this.dataStore.assessments.filter(item=>new Date(item.timestamp)>cutoffDate),biometrics:this.dataStore.biometrics.filter(item=>new Date(item.timestamp)>cutoffDate),interventions:this.dataStore.interventions.filter(item=>new Date(item.timestamp)>cutoffDate)};}// Analyze mood trends\nanalyzeMoodTrends(assessments){if(assessments.length<2)return{trend:'insufficient_data'};const moodScores=assessments.map(a=>a.data.overallScore).filter(score=>score!==undefined);if(moodScores.length<2)return{trend:'insufficient_data'};const firstHalf=moodScores.slice(0,Math.ceil(moodScores.length/2));const secondHalf=moodScores.slice(Math.floor(moodScores.length/2));const firstAvg=firstHalf.reduce((sum,score)=>sum+score,0)/firstHalf.length;const secondAvg=secondHalf.reduce((sum,score)=>sum+score,0)/secondHalf.length;const difference=secondAvg-firstAvg;return{trend:difference>0.2?'improving':difference<-0.2?'declining':'stable',change:difference,currentAverage:secondAvg,confidence:Math.min(moodScores.length/10,1)// More data = higher confidence\n};}// Analyze biometric patterns\nanalyzeBiometricPatterns(biometrics){const heartRateData=biometrics.filter(b=>b.data.heartRate).map(b=>b.data.heartRate);const stressData=biometrics.filter(b=>b.data.stressLevel).map(b=>b.data.stressLevel);return{heartRate:{average:heartRateData.length>0?heartRateData.reduce((sum,hr)=>sum+hr,0)/heartRateData.length:null,trend:this.calculateTrend(heartRateData),variability:this.calculateVariability(heartRateData)},stress:{average:stressData.length>0?stressData.reduce((sum,s)=>sum+s,0)/stressData.length:null,trend:this.calculateTrend(stressData)}};}// Analyze intervention effectiveness\nanalyzeInterventionEffectiveness(interventions){const effectiveness={};interventions.forEach(intervention=>{if(!effectiveness[intervention.type]){effectiveness[intervention.type]={uses:0,totalEffectiveness:0,avgDuration:0,totalDuration:0};}effectiveness[intervention.type].uses++;effectiveness[intervention.type].totalEffectiveness+=intervention.effectiveness||3;effectiveness[intervention.type].totalDuration+=intervention.duration||300;});// Calculate averages\nObject.keys(effectiveness).forEach(type=>{const data=effectiveness[type];data.avgEffectiveness=data.totalEffectiveness/data.uses;data.avgDuration=data.totalDuration/data.uses;});return effectiveness;}// Identify risk factors\nidentifyRiskFactors(data){const risks=[];// Check mood trends\nconst moodTrend=this.analyzeMoodTrends(data.assessments);if(moodTrend.trend==='declining'){risks.push({type:'declining_mood',severity:Math.abs(moodTrend.change)>0.5?'high':'medium',description:'Estado de ánimo en declive'});}// Check biometric patterns\nconst biometrics=this.analyzeBiometricPatterns(data.biometrics);if(biometrics.heartRate.average>90){risks.push({type:'elevated_heart_rate',severity:'medium',description:'Frecuencia cardíaca elevada promedio'});}// Check intervention usage\nif(data.interventions.length<3){risks.push({type:'low_engagement',severity:'low',description:'Bajo uso de técnicas de calma'});}return risks;}// Generate personalized recommendations\ngenerateRecommendations(data){const recommendations=[];// Based on mood trends\nconst moodTrend=this.analyzeMoodTrends(data.assessments);if(moodTrend.trend==='declining'){recommendations.push({type:'intervention',priority:'high',message:'Considera aumentar el uso de técnicas de respiración y afirmaciones positivas'});}// Based on intervention effectiveness\nconst effectiveness=this.analyzeInterventionEffectiveness(data.interventions);const mostEffective=Object.entries(effectiveness).sort((a,b)=>b[1].avgEffectiveness-a[1].avgEffectiveness)[0];if(mostEffective){recommendations.push({type:'technique',priority:'medium',message:\"La t\\xE9cnica \\\"\".concat(mostEffective[0],\"\\\" ha sido m\\xE1s efectiva para ti\")});}// General wellness recommendations\nrecommendations.push({type:'general',priority:'low',message:'Mantén un horario regular para tus evaluaciones de bienestar'});return recommendations;}// Utility functions\ncalculateTrend(values){if(values.length<2)return'insufficient_data';const firstHalf=values.slice(0,Math.ceil(values.length/2));const secondHalf=values.slice(Math.floor(values.length/2));const firstAvg=firstHalf.reduce((sum,val)=>sum+val,0)/firstHalf.length;const secondAvg=secondHalf.reduce((sum,val)=>sum+val,0)/secondHalf.length;const difference=secondAvg-firstAvg;return difference>5?'increasing':difference<-5?'decreasing':'stable';}calculateVariability(values){if(values.length<2)return 0;const mean=values.reduce((sum,val)=>sum+val,0)/values.length;const variance=values.reduce((sum,val)=>sum+Math.pow(val-mean,2),0)/values.length;return Math.sqrt(variance);}getCurrentContext(){return{timeOfDay:new Date().getHours(),dayOfWeek:new Date().getDay(),location:'unknown',// Would integrate with geolocation\nweather:'unknown'// Would integrate with weather API\n};}// Data persistence\npersistData(){try{localStorage.setItem('echoMentalHealthData',JSON.stringify(this.dataStore));}catch(error){console.error('Failed to persist data:',error);}}// Export data for analysis or backup\nexportData(){return{exportDate:new Date().toISOString(),version:'1.0',data:this.dataStore};}// Clear all data (with confirmation)\nclearAllData(){this.dataStore={assessments:[],biometrics:[],interventions:[],userProfile:{},preferences:{}};localStorage.removeItem('echoMentalHealthData');}// Get comprehensive analytics\ngetAnalytics(){let timeRange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;const recentData=this.getRecentData(timeRange);return{summary:{totalAssessments:recentData.assessments.length,totalInterventions:recentData.interventions.length,averageMoodScore:this.calculateAverageScore(recentData.assessments),timeRange:timeRange},patterns:this.analyzePatterns(),riskFactors:this.identifyRiskFactors(recentData),recommendations:this.generateRecommendations(recentData)};}calculateAverageScore(assessments){if(assessments.length===0)return null;const scores=assessments.map(a=>a.data.overallScore).filter(score=>score!==undefined);return scores.length>0?scores.reduce((sum,score)=>sum+score,0)/scores.length:null;}}// Create singleton instance\nconst dataCollectionService=new DataCollectionService();export default dataCollectionService;","map":{"version":3,"names":["DataCollectionService","constructor","dataStore","assessments","biometrics","interventions","userProfile","preferences","initialized","initialize","storedData","localStorage","getItem","_objectSpread","JSON","parse","initializeWearableConnections","console","log","error","saveAssessment","assessmentData","assessment","id","Date","now","toString","timestamp","toISOString","type","data","source","push","persistData","analyzePatterns","saveBiometricData","arguments","length","undefined","biometricEntry","saveInterventionUsage","interventionType","duration","effectiveness","intervention","context","getCurrentContext","analyzeFacialExpressions","videoElement","mockEmotionData","emotions","happiness","Math","random","sadness","anxiety","stress","neutral","anger","fear","microExpressions","eyeMovement","blinkRate","facialTension","jawTension","faceMetrics","symmetry","skinTone","eyeBags","confidence","processingTime","detectHeartRateFromCamera","mockHeartRateData","heartRate","floor","heartRateVariability","signalQuality","navigator","startMockWearableDataCollection","setInterval","wearableData","steps","sleepQuality","stressLevel","skinTemperature","oxygenSaturation","recentData","getRecentData","patterns","moodTrends","analyzeMoodTrends","biometricPatterns","analyzeBiometricPatterns","interventionEffectiveness","analyzeInterventionEffectiveness","riskFactors","identifyRiskFactors","recommendations","generateRecommendations","latestAnalysis","days","cutoffDate","setDate","getDate","filter","item","trend","moodScores","map","a","overallScore","score","firstHalf","slice","ceil","secondHalf","firstAvg","reduce","sum","secondAvg","difference","change","currentAverage","min","heartRateData","b","stressData","average","hr","calculateTrend","variability","calculateVariability","s","forEach","uses","totalEffectiveness","avgDuration","totalDuration","Object","keys","avgEffectiveness","risks","moodTrend","severity","abs","description","priority","message","mostEffective","entries","sort","concat","values","val","mean","variance","pow","sqrt","timeOfDay","getHours","dayOfWeek","getDay","location","weather","setItem","stringify","exportData","exportDate","version","clearAllData","removeItem","getAnalytics","timeRange","summary","totalAssessments","totalInterventions","averageMoodScore","calculateAverageScore","scores","dataCollectionService"],"sources":["/Users/uri/Documents/GitHub/echo/prototype/src/services/DataCollectionService.js"],"sourcesContent":["// Data Collection and Integration Service\nclass DataCollectionService {\n    constructor() {\n        this.dataStore = {\n            assessments: [],\n            biometrics: [],\n            interventions: [],\n            userProfile: {},\n            preferences: {}\n        };\n        this.initialized = false;\n    }\n\n    // Initialize the service\n    async initialize() {\n        try {\n            // Load existing data from localStorage\n            const storedData = localStorage.getItem('echoMentalHealthData');\n            if (storedData) {\n                this.dataStore = { ...this.dataStore, ...JSON.parse(storedData) };\n            }\n            \n            // Initialize wearable connections\n            await this.initializeWearableConnections();\n            \n            this.initialized = true;\n            console.log('Data Collection Service initialized');\n        } catch (error) {\n            console.error('Failed to initialize Data Collection Service:', error);\n        }\n    }\n\n    // Save assessment data\n    saveAssessment(assessmentData) {\n        const assessment = {\n            id: Date.now().toString(),\n            timestamp: new Date().toISOString(),\n            type: 'mental_health_assessment',\n            data: assessmentData,\n            source: 'app_questionnaire'\n        };\n\n        this.dataStore.assessments.push(assessment);\n        this.persistData();\n        \n        // Trigger analytics update\n        this.analyzePatterns();\n        \n        return assessment.id;\n    }\n\n    // Save biometric data\n    saveBiometricData(data, source = 'manual') {\n        const biometricEntry = {\n            id: Date.now().toString(),\n            timestamp: new Date().toISOString(),\n            data: data,\n            source: source, // 'camera', 'wearable', 'manual', etc.\n        };\n\n        this.dataStore.biometrics.push(biometricEntry);\n        this.persistData();\n        \n        return biometricEntry.id;\n    }\n\n    // Save intervention usage\n    saveInterventionUsage(interventionType, duration, effectiveness) {\n        const intervention = {\n            id: Date.now().toString(),\n            timestamp: new Date().toISOString(),\n            type: interventionType,\n            duration: duration,\n            effectiveness: effectiveness, // 1-5 scale\n            context: this.getCurrentContext()\n        };\n\n        this.dataStore.interventions.push(intervention);\n        this.persistData();\n        \n        return intervention.id;\n    }\n\n    // Camera-based emotion detection\n    async analyzeFacialExpressions(videoElement) {\n        try {\n            // This would integrate with TensorFlow.js or similar\n            // For now, returning mock data\n            const mockEmotionData = {\n                emotions: {\n                    happiness: Math.random() * 0.4,\n                    sadness: Math.random() * 0.3,\n                    anxiety: Math.random() * 0.4,\n                    stress: Math.random() * 0.3,\n                    neutral: Math.random() * 0.5,\n                    anger: Math.random() * 0.2,\n                    fear: Math.random() * 0.2\n                },\n                microExpressions: {\n                    eyeMovement: Math.random() * 100,\n                    blinkRate: Math.random() * 20 + 15,\n                    facialTension: Math.random() * 100,\n                    jawTension: Math.random() * 100\n                },\n                faceMetrics: {\n                    symmetry: Math.random() * 100,\n                    skinTone: Math.random() * 100,\n                    eyeBags: Math.random() * 100\n                },\n                confidence: 0.75 + Math.random() * 0.2,\n                processingTime: Math.random() * 500 + 200\n            };\n\n            this.saveBiometricData(mockEmotionData, 'camera');\n            return mockEmotionData;\n        } catch (error) {\n            console.error('Facial expression analysis failed:', error);\n            return null;\n        }\n    }\n\n    // Heart rate detection through camera\n    async detectHeartRateFromCamera(videoElement) {\n        try {\n            // This would use photoplethysmography (PPG) through camera\n            // Analyzing color changes in face/fingertip\n            const mockHeartRateData = {\n                heartRate: Math.floor(Math.random() * 40) + 60, // 60-100 bpm\n                heartRateVariability: Math.random() * 50 + 25,\n                confidence: 0.7 + Math.random() * 0.25,\n                signalQuality: Math.random() * 100,\n                timestamp: new Date().toISOString()\n            };\n\n            this.saveBiometricData(mockHeartRateData, 'camera_ppg');\n            return mockHeartRateData;\n        } catch (error) {\n            console.error('Heart rate detection failed:', error);\n            return null;\n        }\n    }\n\n    // Initialize wearable device connections\n    async initializeWearableConnections() {\n        try {\n            // Check for Web Bluetooth support\n            if ('bluetooth' in navigator) {\n                console.log('Bluetooth API available');\n                // Future implementation for fitness trackers, smartwatches\n            }\n\n            // Check for Web USB support\n            if ('usb' in navigator) {\n                console.log('USB API available');\n                // Future implementation for USB-connected devices\n            }\n\n            // Initialize mock wearable data\n            this.startMockWearableDataCollection();\n        } catch (error) {\n            console.error('Wearable initialization error:', error);\n        }\n    }\n\n    // Mock wearable data collection (for demonstration)\n    startMockWearableDataCollection() {\n        // Simulate periodic data from a fitness tracker\n        setInterval(() => {\n            if (Math.random() > 0.8) { // 20% chance every interval\n                const wearableData = {\n                    heartRate: Math.floor(Math.random() * 40) + 60,\n                    steps: Math.floor(Math.random() * 1000),\n                    sleepQuality: Math.random() * 100,\n                    stressLevel: Math.random() * 100,\n                    skinTemperature: 36 + Math.random() * 2,\n                    oxygenSaturation: 95 + Math.random() * 5\n                };\n                \n                this.saveBiometricData(wearableData, 'wearable_mock');\n            }\n        }, 30000); // Every 30 seconds\n    }\n\n    // Analyze patterns in collected data\n    analyzePatterns() {\n        try {\n            const recentData = this.getRecentData(7); // Last 7 days\n            \n            const patterns = {\n                moodTrends: this.analyzeMoodTrends(recentData.assessments),\n                biometricPatterns: this.analyzeBiometricPatterns(recentData.biometrics),\n                interventionEffectiveness: this.analyzeInterventionEffectiveness(recentData.interventions),\n                riskFactors: this.identifyRiskFactors(recentData),\n                recommendations: this.generateRecommendations(recentData)\n            };\n\n            // Store analysis results\n            this.dataStore.latestAnalysis = {\n                timestamp: new Date().toISOString(),\n                patterns: patterns\n            };\n\n            this.persistData();\n            return patterns;\n        } catch (error) {\n            console.error('Pattern analysis failed:', error);\n            return null;\n        }\n    }\n\n    // Get recent data within specified days\n    getRecentData(days) {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - days);\n\n        return {\n            assessments: this.dataStore.assessments.filter(\n                item => new Date(item.timestamp) > cutoffDate\n            ),\n            biometrics: this.dataStore.biometrics.filter(\n                item => new Date(item.timestamp) > cutoffDate\n            ),\n            interventions: this.dataStore.interventions.filter(\n                item => new Date(item.timestamp) > cutoffDate\n            )\n        };\n    }\n\n    // Analyze mood trends\n    analyzeMoodTrends(assessments) {\n        if (assessments.length < 2) return { trend: 'insufficient_data' };\n\n        const moodScores = assessments\n            .map(a => a.data.overallScore)\n            .filter(score => score !== undefined);\n\n        if (moodScores.length < 2) return { trend: 'insufficient_data' };\n\n        const firstHalf = moodScores.slice(0, Math.ceil(moodScores.length / 2));\n        const secondHalf = moodScores.slice(Math.floor(moodScores.length / 2));\n\n        const firstAvg = firstHalf.reduce((sum, score) => sum + score, 0) / firstHalf.length;\n        const secondAvg = secondHalf.reduce((sum, score) => sum + score, 0) / secondHalf.length;\n\n        const difference = secondAvg - firstAvg;\n\n        return {\n            trend: difference > 0.2 ? 'improving' : difference < -0.2 ? 'declining' : 'stable',\n            change: difference,\n            currentAverage: secondAvg,\n            confidence: Math.min(moodScores.length / 10, 1) // More data = higher confidence\n        };\n    }\n\n    // Analyze biometric patterns\n    analyzeBiometricPatterns(biometrics) {\n        const heartRateData = biometrics\n            .filter(b => b.data.heartRate)\n            .map(b => b.data.heartRate);\n\n        const stressData = biometrics\n            .filter(b => b.data.stressLevel)\n            .map(b => b.data.stressLevel);\n\n        return {\n            heartRate: {\n                average: heartRateData.length > 0 ? \n                    heartRateData.reduce((sum, hr) => sum + hr, 0) / heartRateData.length : null,\n                trend: this.calculateTrend(heartRateData),\n                variability: this.calculateVariability(heartRateData)\n            },\n            stress: {\n                average: stressData.length > 0 ? \n                    stressData.reduce((sum, s) => sum + s, 0) / stressData.length : null,\n                trend: this.calculateTrend(stressData)\n            }\n        };\n    }\n\n    // Analyze intervention effectiveness\n    analyzeInterventionEffectiveness(interventions) {\n        const effectiveness = {};\n        \n        interventions.forEach(intervention => {\n            if (!effectiveness[intervention.type]) {\n                effectiveness[intervention.type] = {\n                    uses: 0,\n                    totalEffectiveness: 0,\n                    avgDuration: 0,\n                    totalDuration: 0\n                };\n            }\n            \n            effectiveness[intervention.type].uses++;\n            effectiveness[intervention.type].totalEffectiveness += intervention.effectiveness || 3;\n            effectiveness[intervention.type].totalDuration += intervention.duration || 300;\n        });\n\n        // Calculate averages\n        Object.keys(effectiveness).forEach(type => {\n            const data = effectiveness[type];\n            data.avgEffectiveness = data.totalEffectiveness / data.uses;\n            data.avgDuration = data.totalDuration / data.uses;\n        });\n\n        return effectiveness;\n    }\n\n    // Identify risk factors\n    identifyRiskFactors(data) {\n        const risks = [];\n\n        // Check mood trends\n        const moodTrend = this.analyzeMoodTrends(data.assessments);\n        if (moodTrend.trend === 'declining') {\n            risks.push({\n                type: 'declining_mood',\n                severity: Math.abs(moodTrend.change) > 0.5 ? 'high' : 'medium',\n                description: 'Estado de ánimo en declive'\n            });\n        }\n\n        // Check biometric patterns\n        const biometrics = this.analyzeBiometricPatterns(data.biometrics);\n        if (biometrics.heartRate.average > 90) {\n            risks.push({\n                type: 'elevated_heart_rate',\n                severity: 'medium',\n                description: 'Frecuencia cardíaca elevada promedio'\n            });\n        }\n\n        // Check intervention usage\n        if (data.interventions.length < 3) {\n            risks.push({\n                type: 'low_engagement',\n                severity: 'low',\n                description: 'Bajo uso de técnicas de calma'\n            });\n        }\n\n        return risks;\n    }\n\n    // Generate personalized recommendations\n    generateRecommendations(data) {\n        const recommendations = [];\n\n        // Based on mood trends\n        const moodTrend = this.analyzeMoodTrends(data.assessments);\n        if (moodTrend.trend === 'declining') {\n            recommendations.push({\n                type: 'intervention',\n                priority: 'high',\n                message: 'Considera aumentar el uso de técnicas de respiración y afirmaciones positivas'\n            });\n        }\n\n        // Based on intervention effectiveness\n        const effectiveness = this.analyzeInterventionEffectiveness(data.interventions);\n        const mostEffective = Object.entries(effectiveness)\n            .sort((a, b) => b[1].avgEffectiveness - a[1].avgEffectiveness)[0];\n\n        if (mostEffective) {\n            recommendations.push({\n                type: 'technique',\n                priority: 'medium',\n                message: `La técnica \"${mostEffective[0]}\" ha sido más efectiva para ti`\n            });\n        }\n\n        // General wellness recommendations\n        recommendations.push({\n            type: 'general',\n            priority: 'low',\n            message: 'Mantén un horario regular para tus evaluaciones de bienestar'\n        });\n\n        return recommendations;\n    }\n\n    // Utility functions\n    calculateTrend(values) {\n        if (values.length < 2) return 'insufficient_data';\n        \n        const firstHalf = values.slice(0, Math.ceil(values.length / 2));\n        const secondHalf = values.slice(Math.floor(values.length / 2));\n        \n        const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\n        const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\n        \n        const difference = secondAvg - firstAvg;\n        return difference > 5 ? 'increasing' : difference < -5 ? 'decreasing' : 'stable';\n    }\n\n    calculateVariability(values) {\n        if (values.length < 2) return 0;\n        \n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n        return Math.sqrt(variance);\n    }\n\n    getCurrentContext() {\n        return {\n            timeOfDay: new Date().getHours(),\n            dayOfWeek: new Date().getDay(),\n            location: 'unknown', // Would integrate with geolocation\n            weather: 'unknown'   // Would integrate with weather API\n        };\n    }\n\n    // Data persistence\n    persistData() {\n        try {\n            localStorage.setItem('echoMentalHealthData', JSON.stringify(this.dataStore));\n        } catch (error) {\n            console.error('Failed to persist data:', error);\n        }\n    }\n\n    // Export data for analysis or backup\n    exportData() {\n        return {\n            exportDate: new Date().toISOString(),\n            version: '1.0',\n            data: this.dataStore\n        };\n    }\n\n    // Clear all data (with confirmation)\n    clearAllData() {\n        this.dataStore = {\n            assessments: [],\n            biometrics: [],\n            interventions: [],\n            userProfile: {},\n            preferences: {}\n        };\n        localStorage.removeItem('echoMentalHealthData');\n    }\n\n    // Get comprehensive analytics\n    getAnalytics(timeRange = 30) {\n        const recentData = this.getRecentData(timeRange);\n        return {\n            summary: {\n                totalAssessments: recentData.assessments.length,\n                totalInterventions: recentData.interventions.length,\n                averageMoodScore: this.calculateAverageScore(recentData.assessments),\n                timeRange: timeRange\n            },\n            patterns: this.analyzePatterns(),\n            riskFactors: this.identifyRiskFactors(recentData),\n            recommendations: this.generateRecommendations(recentData)\n        };\n    }\n\n    calculateAverageScore(assessments) {\n        if (assessments.length === 0) return null;\n        \n        const scores = assessments\n            .map(a => a.data.overallScore)\n            .filter(score => score !== undefined);\n            \n        return scores.length > 0 ? \n            scores.reduce((sum, score) => sum + score, 0) / scores.length : null;\n    }\n}\n\n// Create singleton instance\nconst dataCollectionService = new DataCollectionService();\n\nexport default dataCollectionService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}